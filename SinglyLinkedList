
class Node {
    value;
    next;

    constructor (value) {
        this.value = value;
        this.next = null;
    }
}

class SinglyLinkedList {
    constructor (){
        this.head = null;
        this.tail = null;
        this.length = 0;
    }

    push (value) {
        let node = new Node(value);

        if (!this.head){
            this.head = node;
            this.tail = node;
        } else {
            this.tail.next = node;
            this.tail = node;
        }

        this.length++;
        return this;
    }

    pop (){
        if (!this.head) return undefined;

        let current = this.head;
        let popped = this.tail;
        while(current.next !== this.tail){
            current = current.next;
        }
        current.next = null;
        this.tail = current;
        this.length--;
        if (this.length === 0){
            this.head = null;
            this.tail = null;
        }
        return popped;
    }

    shift(){
        if (!this.head) return undefined;

        let popped = this.head;
        this.head = popped.next;
        this.length--;
        if (this.length === 0){
            this.head = null;
            this.tail = null;
        }

        return popped;
    }

    unshift(value){
        let node = new Node(value);

        if (this.head === null){
            this.head = node;
            this.tail = node;
        } else {
            node.next = this.head;
            this.head = node;
        }
        this.length++;
        return this;
    }

    get (index) {
        if (index >= this.length || index < 0) return undefined;

        let current = this.head;
        for (let i = 0; i < index; i++){
            current = current.next;
        }

        return current;
    }

    set (index, value){
        let foundNode = this.get(index);
        if (foundNode){
            foundNode.value = value;
            return true;
        } else {
            return false;
        }
    }

    insert (index, value){
        if (index > this.length || index < 0) return false;
        if (index === 0) return !!this.unshift(value);
        if (index === this.length) return !!this.push(value);

        let newNode = new Node(value);
        let prevNode = this.get(index - 1);
        let nextNode = prevNode.next;
        prevNode.next = newNode;
        newNode.next = nextNode;
        this.length++;
        return true;
    }

    remove (index){
        if (index >= this.length || index < 0) return undefined;
        if (index === 0) return this.shift();
        if (index === this.length - 1) return this.pop();

        let prevNode = this.get(index - 1);
        let removedNode = prevNode.next;
        prevNode.next = removedNode.next;
        removedNode.next = null;
        this.length--;

        return removedNode;
    }

    reverse(){
        if (this.length === 0) return;

        let node = this.head;
        this.head = this.tail;
        this.tail = node;

        let prev = null;
        let next;

        for (let i = 0; i < this.length; i++){
            next = node.next;
            node.next = prev;
            prev = node;
            node = next;
        }
        return this;
    }

    print(){
        if (this.length === 0) return;
        let arr = [];
        let current = this.head;
        
        while (current){
            arr.push(current.value);
            current = current.next;
        }

        console.log(arr);
    }
}

let list = new SinglyLinkedList();

list.push("hello");
list.push("how");
list.push("are");
list.push("you");

// console.log(list.unshift("heya"));
// list.unshift("heya")
// console.log(list.tail)
// console.log(list.head)
console.log(list.insert(0, "first"))
console.log(list.insert(3, "third"))
console.log(list.insert(8, "third"))
